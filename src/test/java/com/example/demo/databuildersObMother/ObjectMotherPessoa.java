package com.example.demo.databuildersObMother;

import com.example.demo.modelo.Endereco;
import com.example.demo.modelo.Pessoa;
import com.example.demo.modelo.Telefone;
import com.github.javafaker.Faker;
import lombok.Builder;
import lombok.Builder.Default;
import lombok.Getter;

import java.util.Arrays;
import java.util.Locale;

@Builder
@Getter
public class ObjectMotherPessoa {

    private Pessoa pessoa;
    private static Telefone tel;

    private static Faker faker = new Faker(new Locale("en-BR"));
    private static String FAKER_REGEX_CPF = "[0-9]{3}\\.[0-9]{3}\\.[0-9]{3}-[0-9]{2}";
    private static String FAKER_REGEX_DDD = "[0-9]{2}";
    private static String FAKER_REGEX_TEL = "[0-9]{9}";

    @Default
    private static Long number;

    @Default
    private static String nome;

    @Default
    private static String cpf;

    @Default
    private static String ddd;

    @Default
    private static String telNumero;

    @Default
    private static String logradouro;

    @Default
    private static Integer numeroEnd;

    @Default
    private static String complemento;

    @Default
    private static String bairro;

    @Default
    private static String cidade;

    @Default
    private static String estado;

    public static ObjectMotherPessoa pessoaComCpfeTel() {
        autoGenerateDataForThisBuilder();

        Pessoa pessoa = new Pessoa();
        pessoa.setNome(nome);
        pessoa.setCpf(cpf);

        Telefone tel = new Telefone();
        tel.setDdd(ddd);
        tel.setNumero(telNumero);

        pessoa.setTelefones(Arrays.asList(tel));

        return ObjectMotherPessoa.builder().pessoa(pessoa).build();
    }

    public static ObjectMotherPessoa pessoaComCpfTelAddress() {
        autoGenerateDataForThisBuilder();

        Pessoa pessoa = new Pessoa();
        pessoa.setNome(nome);
        pessoa.setCpf(cpf);

        tel = new Telefone();
        tel.setDdd(ddd);
        tel.setNumero(telNumero);

        Endereco end = new Endereco();
        end.setLogradouro(logradouro);
        end.setComplemento(complemento);
        end.setBairro(bairro);
        end.setCidade(cidade);
        end.setEstado(estado);
        end.setNumero(numeroEnd);

        pessoa.setTelefones(Arrays.asList(tel));
        pessoa.setEnderecos(Arrays.asList(end));
        return ObjectMotherPessoa.builder().pessoa(pessoa).build();
    }

    public static ObjectMotherPessoa pessoaComCpf() {
        Pessoa pessoa = new Pessoa();
        pessoa.setNome(nome);
        pessoa.setCpf(cpf);
        return ObjectMotherPessoa.builder().pessoa(pessoa).build();
    }

    public static ObjectMotherPessoa pessoaComCpfDiverso() {
        Pessoa pessoa = new Pessoa();
        pessoa.setNome(faker.name().fullName()); // TODO: ao inves da variavel, usar o faker direto, que permite o
        // metodo ser estatico
        pessoa.setCpf(Faker.instance().regexify(FAKER_REGEX_CPF).trim());
        return ObjectMotherPessoa.builder().pessoa(pessoa).build();
    }

    private static void autoGenerateDataForThisBuilder() {
        number = faker.number().randomNumber(3, true);
        nome = "x" + faker.name().fullName();
        cpf = faker.regexify(FAKER_REGEX_CPF).trim();

        ddd = faker.regexify(FAKER_REGEX_DDD).trim();
        telNumero = "1" + faker.regexify(FAKER_REGEX_TEL).trim();

        logradouro = faker.address().streetAddress();
        numeroEnd = Integer.parseInt(faker.address().streetAddressNumber());
        complemento = faker.address().buildingNumber();
        bairro = faker.address().cityName();
        cidade = faker.address().city();
        estado = faker.address().stateAbbr();
    }

    public Pessoa gerar() {
        return this.pessoa;
    }
}